// Code generated by mockery v2.50.4. DO NOT EDIT.

package mockery

import (
	context "context"

	ast "github.com/walteh/go-tmpl-typer/pkg/ast"

	mock "github.com/stretchr/testify/mock"

	parser "github.com/walteh/go-tmpl-typer/pkg/parser"

	types "github.com/walteh/go-tmpl-typer/pkg/types"
)

// MockValidator_types is an autogenerated mock type for the Validator type
type MockValidator_types struct {
	mock.Mock
}

type MockValidator_types_Expecter struct {
	mock *mock.Mock
}

func (_m *MockValidator_types) EXPECT() *MockValidator_types_Expecter {
	return &MockValidator_types_Expecter{mock: &_m.Mock}
}

// GetRootMethods provides a mock function with no fields
func (_m *MockValidator_types) GetRootMethods() map[string]*types.MethodInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRootMethods")
	}

	var r0 map[string]*types.MethodInfo
	if rf, ok := ret.Get(0).(func() map[string]*types.MethodInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*types.MethodInfo)
		}
	}

	return r0
}

// MockValidator_types_GetRootMethods_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRootMethods'
type MockValidator_types_GetRootMethods_Call struct {
	*mock.Call
}

// GetRootMethods is a helper method to define mock.On call
func (_e *MockValidator_types_Expecter) GetRootMethods() *MockValidator_types_GetRootMethods_Call {
	return &MockValidator_types_GetRootMethods_Call{Call: _e.mock.On("GetRootMethods")}
}

func (_c *MockValidator_types_GetRootMethods_Call) Run(run func()) *MockValidator_types_GetRootMethods_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValidator_types_GetRootMethods_Call) Return(_a0 map[string]*types.MethodInfo) *MockValidator_types_GetRootMethods_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValidator_types_GetRootMethods_Call) RunAndReturn(run func() map[string]*types.MethodInfo) *MockValidator_types_GetRootMethods_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateField provides a mock function with given fields: ctx, typeInfo, fieldPath
func (_m *MockValidator_types) ValidateField(ctx context.Context, typeInfo *types.TypeInfo, fieldPath parser.VariableLocation) (*types.FieldInfo, error) {
	ret := _m.Called(ctx, typeInfo, fieldPath)

	if len(ret) == 0 {
		panic("no return value specified for ValidateField")
	}

	var r0 *types.FieldInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.TypeInfo, parser.VariableLocation) (*types.FieldInfo, error)); ok {
		return rf(ctx, typeInfo, fieldPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.TypeInfo, parser.VariableLocation) *types.FieldInfo); ok {
		r0 = rf(ctx, typeInfo, fieldPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.FieldInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.TypeInfo, parser.VariableLocation) error); ok {
		r1 = rf(ctx, typeInfo, fieldPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValidator_types_ValidateField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateField'
type MockValidator_types_ValidateField_Call struct {
	*mock.Call
}

// ValidateField is a helper method to define mock.On call
//   - ctx context.Context
//   - typeInfo *types.TypeInfo
//   - fieldPath parser.VariableLocation
func (_e *MockValidator_types_Expecter) ValidateField(ctx interface{}, typeInfo interface{}, fieldPath interface{}) *MockValidator_types_ValidateField_Call {
	return &MockValidator_types_ValidateField_Call{Call: _e.mock.On("ValidateField", ctx, typeInfo, fieldPath)}
}

func (_c *MockValidator_types_ValidateField_Call) Run(run func(ctx context.Context, typeInfo *types.TypeInfo, fieldPath parser.VariableLocation)) *MockValidator_types_ValidateField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.TypeInfo), args[2].(parser.VariableLocation))
	})
	return _c
}

func (_c *MockValidator_types_ValidateField_Call) Return(_a0 *types.FieldInfo, _a1 error) *MockValidator_types_ValidateField_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValidator_types_ValidateField_Call) RunAndReturn(run func(context.Context, *types.TypeInfo, parser.VariableLocation) (*types.FieldInfo, error)) *MockValidator_types_ValidateField_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateMethod provides a mock function with given fields: ctx, methodName
func (_m *MockValidator_types) ValidateMethod(ctx context.Context, methodName string) (*types.MethodInfo, error) {
	ret := _m.Called(ctx, methodName)

	if len(ret) == 0 {
		panic("no return value specified for ValidateMethod")
	}

	var r0 *types.MethodInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.MethodInfo, error)); ok {
		return rf(ctx, methodName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.MethodInfo); ok {
		r0 = rf(ctx, methodName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MethodInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, methodName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValidator_types_ValidateMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateMethod'
type MockValidator_types_ValidateMethod_Call struct {
	*mock.Call
}

// ValidateMethod is a helper method to define mock.On call
//   - ctx context.Context
//   - methodName string
func (_e *MockValidator_types_Expecter) ValidateMethod(ctx interface{}, methodName interface{}) *MockValidator_types_ValidateMethod_Call {
	return &MockValidator_types_ValidateMethod_Call{Call: _e.mock.On("ValidateMethod", ctx, methodName)}
}

func (_c *MockValidator_types_ValidateMethod_Call) Run(run func(ctx context.Context, methodName string)) *MockValidator_types_ValidateMethod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockValidator_types_ValidateMethod_Call) Return(_a0 *types.MethodInfo, _a1 error) *MockValidator_types_ValidateMethod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValidator_types_ValidateMethod_Call) RunAndReturn(run func(context.Context, string) (*types.MethodInfo, error)) *MockValidator_types_ValidateMethod_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateType provides a mock function with given fields: ctx, typePath, registry
func (_m *MockValidator_types) ValidateType(ctx context.Context, typePath string, registry ast.PackageAnalyzer) (*types.TypeInfo, error) {
	ret := _m.Called(ctx, typePath, registry)

	if len(ret) == 0 {
		panic("no return value specified for ValidateType")
	}

	var r0 *types.TypeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ast.PackageAnalyzer) (*types.TypeInfo, error)); ok {
		return rf(ctx, typePath, registry)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ast.PackageAnalyzer) *types.TypeInfo); ok {
		r0 = rf(ctx, typePath, registry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.TypeInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ast.PackageAnalyzer) error); ok {
		r1 = rf(ctx, typePath, registry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValidator_types_ValidateType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateType'
type MockValidator_types_ValidateType_Call struct {
	*mock.Call
}

// ValidateType is a helper method to define mock.On call
//   - ctx context.Context
//   - typePath string
//   - registry ast.PackageAnalyzer
func (_e *MockValidator_types_Expecter) ValidateType(ctx interface{}, typePath interface{}, registry interface{}) *MockValidator_types_ValidateType_Call {
	return &MockValidator_types_ValidateType_Call{Call: _e.mock.On("ValidateType", ctx, typePath, registry)}
}

func (_c *MockValidator_types_ValidateType_Call) Run(run func(ctx context.Context, typePath string, registry ast.PackageAnalyzer)) *MockValidator_types_ValidateType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(ast.PackageAnalyzer))
	})
	return _c
}

func (_c *MockValidator_types_ValidateType_Call) Return(_a0 *types.TypeInfo, _a1 error) *MockValidator_types_ValidateType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValidator_types_ValidateType_Call) RunAndReturn(run func(context.Context, string, ast.PackageAnalyzer) (*types.TypeInfo, error)) *MockValidator_types_ValidateType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockValidator_types creates a new instance of MockValidator_types. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValidator_types(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValidator_types {
	mock := &MockValidator_types{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
