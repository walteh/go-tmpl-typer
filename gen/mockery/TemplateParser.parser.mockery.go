// Code generated by mockery v2.50.4. DO NOT EDIT.

package mockery

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	parser "github.com/walteh/go-tmpl-typer/pkg/parser"
)

// MockTemplateParser_parser is an autogenerated mock type for the TemplateParser type
type MockTemplateParser_parser struct {
	mock.Mock
}

type MockTemplateParser_parser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemplateParser_parser) EXPECT() *MockTemplateParser_parser_Expecter {
	return &MockTemplateParser_parser_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function with given fields: ctx, content, filename
func (_m *MockTemplateParser_parser) Parse(ctx context.Context, content []byte, filename string) (*parser.TemplateInfo, error) {
	ret := _m.Called(ctx, content, filename)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 *parser.TemplateInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) (*parser.TemplateInfo, error)); ok {
		return rf(ctx, content, filename)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) *parser.TemplateInfo); ok {
		r0 = rf(ctx, content, filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*parser.TemplateInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, string) error); ok {
		r1 = rf(ctx, content, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemplateParser_parser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type MockTemplateParser_parser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - ctx context.Context
//   - content []byte
//   - filename string
func (_e *MockTemplateParser_parser_Expecter) Parse(ctx interface{}, content interface{}, filename interface{}) *MockTemplateParser_parser_Parse_Call {
	return &MockTemplateParser_parser_Parse_Call{Call: _e.mock.On("Parse", ctx, content, filename)}
}

func (_c *MockTemplateParser_parser_Parse_Call) Run(run func(ctx context.Context, content []byte, filename string)) *MockTemplateParser_parser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].(string))
	})
	return _c
}

func (_c *MockTemplateParser_parser_Parse_Call) Return(_a0 *parser.TemplateInfo, _a1 error) *MockTemplateParser_parser_Parse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemplateParser_parser_Parse_Call) RunAndReturn(run func(context.Context, []byte, string) (*parser.TemplateInfo, error)) *MockTemplateParser_parser_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTemplateParser_parser creates a new instance of MockTemplateParser_parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemplateParser_parser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemplateParser_parser {
	mock := &MockTemplateParser_parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
