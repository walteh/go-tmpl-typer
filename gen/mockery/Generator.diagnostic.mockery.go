// Code generated by mockery v2.50.4. DO NOT EDIT.

package mockery

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	diagnostic "github.com/walteh/go-tmpl-typer/pkg/diagnostic"

	parser "github.com/walteh/go-tmpl-typer/pkg/parser"
)

// MockGenerator_diagnostic is an autogenerated mock type for the Generator type
type MockGenerator_diagnostic struct {
	mock.Mock
}

type MockGenerator_diagnostic_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGenerator_diagnostic) EXPECT() *MockGenerator_diagnostic_Expecter {
	return &MockGenerator_diagnostic_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: ctx, info
func (_m *MockGenerator_diagnostic) Generate(ctx context.Context, info *parser.TemplateInfo) (*diagnostic.Diagnostics, error) {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 *diagnostic.Diagnostics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *parser.TemplateInfo) (*diagnostic.Diagnostics, error)); ok {
		return rf(ctx, info)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *parser.TemplateInfo) *diagnostic.Diagnostics); ok {
		r0 = rf(ctx, info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnostic.Diagnostics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *parser.TemplateInfo) error); ok {
		r1 = rf(ctx, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGenerator_diagnostic_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockGenerator_diagnostic_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx context.Context
//   - info *parser.TemplateInfo
func (_e *MockGenerator_diagnostic_Expecter) Generate(ctx interface{}, info interface{}) *MockGenerator_diagnostic_Generate_Call {
	return &MockGenerator_diagnostic_Generate_Call{Call: _e.mock.On("Generate", ctx, info)}
}

func (_c *MockGenerator_diagnostic_Generate_Call) Run(run func(ctx context.Context, info *parser.TemplateInfo)) *MockGenerator_diagnostic_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*parser.TemplateInfo))
	})
	return _c
}

func (_c *MockGenerator_diagnostic_Generate_Call) Return(_a0 *diagnostic.Diagnostics, _a1 error) *MockGenerator_diagnostic_Generate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGenerator_diagnostic_Generate_Call) RunAndReturn(run func(context.Context, *parser.TemplateInfo) (*diagnostic.Diagnostics, error)) *MockGenerator_diagnostic_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGenerator_diagnostic creates a new instance of MockGenerator_diagnostic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenerator_diagnostic(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenerator_diagnostic {
	mock := &MockGenerator_diagnostic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
