// Code generated by mockery v2.50.4. DO NOT EDIT.

package mockery

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	ast "github.com/walteh/go-tmpl-typer/pkg/ast"
)

// MockPackageAnalyzer_ast is an autogenerated mock type for the PackageAnalyzer type
type MockPackageAnalyzer_ast struct {
	mock.Mock
}

type MockPackageAnalyzer_ast_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPackageAnalyzer_ast) EXPECT() *MockPackageAnalyzer_ast_Expecter {
	return &MockPackageAnalyzer_ast_Expecter{mock: &_m.Mock}
}

// AnalyzePackage provides a mock function with given fields: ctx, packageDir
func (_m *MockPackageAnalyzer_ast) AnalyzePackage(ctx context.Context, packageDir string) (*ast.TypeRegistry, error) {
	ret := _m.Called(ctx, packageDir)

	if len(ret) == 0 {
		panic("no return value specified for AnalyzePackage")
	}

	var r0 *ast.TypeRegistry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ast.TypeRegistry, error)); ok {
		return rf(ctx, packageDir)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ast.TypeRegistry); ok {
		r0 = rf(ctx, packageDir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ast.TypeRegistry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, packageDir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPackageAnalyzer_ast_AnalyzePackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AnalyzePackage'
type MockPackageAnalyzer_ast_AnalyzePackage_Call struct {
	*mock.Call
}

// AnalyzePackage is a helper method to define mock.On call
//   - ctx context.Context
//   - packageDir string
func (_e *MockPackageAnalyzer_ast_Expecter) AnalyzePackage(ctx interface{}, packageDir interface{}) *MockPackageAnalyzer_ast_AnalyzePackage_Call {
	return &MockPackageAnalyzer_ast_AnalyzePackage_Call{Call: _e.mock.On("AnalyzePackage", ctx, packageDir)}
}

func (_c *MockPackageAnalyzer_ast_AnalyzePackage_Call) Run(run func(ctx context.Context, packageDir string)) *MockPackageAnalyzer_ast_AnalyzePackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPackageAnalyzer_ast_AnalyzePackage_Call) Return(_a0 *ast.TypeRegistry, _a1 error) *MockPackageAnalyzer_ast_AnalyzePackage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPackageAnalyzer_ast_AnalyzePackage_Call) RunAndReturn(run func(context.Context, string) (*ast.TypeRegistry, error)) *MockPackageAnalyzer_ast_AnalyzePackage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPackageAnalyzer_ast creates a new instance of MockPackageAnalyzer_ast. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPackageAnalyzer_ast(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPackageAnalyzer_ast {
	mock := &MockPackageAnalyzer_ast{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
